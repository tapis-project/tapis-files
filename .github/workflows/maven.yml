# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - uses: actions/checkout@v2
      with:
        path: tapis-files

    - uses: actions/checkout@v2
      with:
        repository: tapis-project/tapis-shared-java
        ref: dev
        path: tapis-shared-java

    - uses: actions/checkout@v2
      with:
        repository: tapis-project/tapis-bom
        ref: dev
        path: tapis-bom

    - uses: actions/checkout@v2
      with:
        repository: tapis-project/tapis-client-java
        ref: dev
        path: tapis-client-java

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 13
#    - name: SonarCloud Scan
#      uses: SonarSource/sonarcloud-github-action@v1.3
#      with:
#        # Set the sonar.projectBaseDir analysis property
#        projectBaseDir: # optional, default is .
    - name: Build with Maven
      run: |
        ls -lah
        mvn -B install -f tapis-bom/pom.xml
        mvn -B install -f tapis-shared-java/pom.xml
        mvn -B install -f tapis-client-java/pom.xml
        mvn -B install -f tapis-files/pom.xml -DskipTests=true -Dflyway.skip=true

    - name: Integration tests
      run: |
        cd tapis-files
        docker-compose -f deploy/docker-compose.yml up -d
        sleep 3
        docker exec postgres psql -U dev -c "CREATE DATABASE test"
        docker exec postgres psql -U dev -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" -d test"
        docker exec postgres psql -U dev -c "CREATE USER test with encrypted password 'test'"
        docker exec postgres psql -U dev -c "GRANT ALL PRIVILEGES ON DATABASE test TO test"
        mvn verify -DAPP_ENV=test

    - name: Build images
      run: |
        cd tapis-files
        docker build -t tapis/files-api:dev -f deploy/Dockerfile .
        docker build -t tapis/test-ssh-machine -f deploy/Dockerfile.ssh-machine .
        docker build -t tapis/files-workers:dev -f deploy/Dockerfile.workers .

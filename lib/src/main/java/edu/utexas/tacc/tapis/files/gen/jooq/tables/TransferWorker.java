/*
 * This file is generated by jOOQ.
 */
package edu.utexas.tacc.tapis.files.gen.jooq.tables;


import edu.utexas.tacc.tapis.files.gen.jooq.Files;
import edu.utexas.tacc.tapis.files.gen.jooq.tables.records.TransferWorkerRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferWorker extends TableImpl<TransferWorkerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>files.transfer_worker</code>
     */
    public static final TransferWorker TRANSFER_WORKER = new TransferWorker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferWorkerRecord> getRecordType() {
        return TransferWorkerRecord.class;
    }

    /**
     * The column <code>files.transfer_worker.uuid</code>.
     */
    public final TableField<TransferWorkerRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>files.transfer_worker.last_updated</code>.
     */
    public final TableField<TransferWorkerRecord, OffsetDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private TransferWorker(Name alias, Table<TransferWorkerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransferWorker(Name alias, Table<TransferWorkerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>files.transfer_worker</code> table reference
     */
    public TransferWorker(String alias) {
        this(DSL.name(alias), TRANSFER_WORKER);
    }

    /**
     * Create an aliased <code>files.transfer_worker</code> table reference
     */
    public TransferWorker(Name alias) {
        this(alias, TRANSFER_WORKER);
    }

    /**
     * Create a <code>files.transfer_worker</code> table reference
     */
    public TransferWorker() {
        this(DSL.name("transfer_worker"), null);
    }

    public <O extends Record> TransferWorker(Table<O> child, ForeignKey<O, TransferWorkerRecord> key) {
        super(child, key, TRANSFER_WORKER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Files.FILES;
    }

    @Override
    public TransferWorker as(String alias) {
        return new TransferWorker(DSL.name(alias), this);
    }

    @Override
    public TransferWorker as(Name alias) {
        return new TransferWorker(alias, this);
    }

    @Override
    public TransferWorker as(Table<?> alias) {
        return new TransferWorker(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferWorker rename(String name) {
        return new TransferWorker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferWorker rename(Name name) {
        return new TransferWorker(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransferWorker rename(Table<?> name) {
        return new TransferWorker(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<java.util.UUID, OffsetDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super java.util.UUID, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super java.util.UUID, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
